generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model MenProduct {
    id          Int     @id @default(autoincrement())
    name        String
    price       Float
    description String?
    imageUrl    String?
    carts       Cart[]  @relation("menProductToCart") // Relation is here
}

model WomenProduct {
    id          Int     @id @default(autoincrement())
    name        String
    price       Float
    description String?
    imageUrl    String?
    carts       Cart[]  @relation("womenProductToCart")
}

model KidsProduct {
    id          Int     @id @default(autoincrement())
    name        String
    price       Float
    description String?
    imageUrl    String?
    carts       Cart[]  @relation("kidsProductToCart")
}

model AccessoriesProduct {
    id          Int     @id @default(autoincrement())
    name        String
    price       Float
    description String?
    imageUrl    String?
    carts       Cart[]  @relation("accessoriesProductToCart")
}

model CosmeticsProduct {
    id          Int     @id @default(autoincrement())
    name        String
    price       Float
    description String?
    imageUrl    String?
    carts       Cart[]  @relation("cosmeticsProductToCart")
}

model Cart {
    id                Int     @id @default(autoincrement())
    userId            Int
    quantity          Int     @default(1)
    productType       String
    user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    menProductId      Int?
    menProduct        MenProduct? @relation("menProductToCart", fields: [menProductId], references: [id]) // Relation is here
    womenProductId    Int?
    womenProduct      WomenProduct? @relation("womenProductToCart", fields: [womenProductId], references: [id])
    kidsProductId     Int?
    kidsProduct       KidsProduct? @relation("kidsProductToCart", fields: [kidsProductId], references: [id])
    accessoriesProductId Int?
    accessoriesProduct AccessoriesProduct? @relation("accessoriesProductToCart", fields: [accessoriesProductId], references: [id])
    cosmeticsProductId Int?
    cosmeticsProduct   CosmeticsProduct? @relation("cosmeticsProductToCart", fields: [cosmeticsProductId], references: [id])
    createdAt         DateTime @default(now())
}

model User {
    id       Int      @id @default(autoincrement())
    username String   @unique
    email    String   @unique
    password String
    carts    Cart[]
    profile  Profile?
}

model Profile {
    id      Int  @id @default(autoincrement())
    userId  Int  @unique
    username String
    email    String
    user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Order {
  id              Int      @id @default(autoincrement())
  productId       Int
  productType     String
  quantity        Int
  totalPrice      Float
  customerName    String
  customerEmail   String
  shippingAddress String
  paymentMethod   String
  status          String   @default("Pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
